 URI uri = new URI("/product/"+product.getId());
        return ResponseEntity.created(uri).body(product);
		
		
		
validation response
exception response
response

mapper

runner
messages constant
other constant
ResponseStatusException

Add logs in every class

use yml

put doc comment over every method and class

DO method structure

throw UserNOtFoundEception everywhere if user not exist and catch it in RestControllerAdvice


Inherited Problems:

1. after login again(same user, may be from other system) we get new access token and refresh token but old access token still works but in redis cache we have new refresh token so when the old access token expires it cannot be renewed as refresh token not matches in redis cache as that old refresh token has been overwritten in redis cache. This problem goes on if user login again (or in other system) then old one logged in cannot access once old one's access token expires as their refresh token not exist, they have to login again and this forms a chain

possible solution: store refresh and access token both in redis cache for each login as a key value pair

How to make redis repo?? is is possible?? find different ways of storing data in redis??

make constant file and put all literals there







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



Questions To Ask:
1. why access token and refresh token and why we need to store it and if storing refresh token is required then why and why not access token?
2. while defining database/JPA entity, for many to many relation should we use composite PK or single PK (id), why and why not?
3. user_score should have quiz id

4. clarify link question API, list or single question
5. total attendees ? attended any quiz or only registered ones
6. quiz count ?? deleted ? or all?
7. attendess count with quiz ?? is it attendess who attneded the quizes
8. how we can inject properties value if not using @Component


we can delete quiz if no one have attempted or quiz have no questions

why we put final before DTO in controller

//TODO: use @Transactional everywhere instead of save() and for other things
// TODO: format and clear code everywhere
// TODO: use UUID in every DTO/model (see walletMe for implementation idea)
// TODO: optimize the hibernate mapping and repository crud operations



-- DROP TABLE IF EXISTS `quiz_management`.`category`;

-- CREATE TABLE `quiz_management`.`category`
-- (`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,
-- `name` varchar(45) NOT NULL UNIQUE,
-- `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
--   `updated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP);
--   
-- CREATE TABLE `quiz_management`.`quiz_category` (
--   `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,
--   `quiz_id` int NOT NULL,
--   `category_id` int NOT NULL,
--   `deleted` varchar(1) NOT NULL DEFAULT 'N',
--   `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
--   `updated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
--   KEY `FK_CQ_QUIZ_ID_idx` (`quiz_id`),
--   KEY `FK_CQ_CATEGORY_ID_idx` (`category_id`),
--   CONSTRAINT `FK_CQ_QUIZ_ID` FOREIGN KEY (`quiz_id`) REFERENCES `quiz`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,
--   CONSTRAINT `FK_CQ_CATEGORY_ID` FOREIGN KEY (`category_id`) REFERENCES `category`(`id`) ON DELETE CASCADE ON UPDATE CASCADE
--   )

-- here no need to add KEY as innodb automatically index foreign key if not specified
-- ALTER TABLE `quiz_management`.`user_score`
-- ADD COLUMN `quiz_id` INT NOT NULL,
-- ADD CONSTRAINT `FK_USER_SCORE_QUIZ_ID` FOREIGN KEY (`quiz_id`)
-- REFERENCES `quiz_management`.`quiz` (`id`);



{
    "questionDetail": "How many layers are in TCP/IP protocol?",
    "optionA": "1",
    "optionB": "3",
    "optionC": "2",
    "optionD": "5",
    "rightOption": "D",
    "marks": "1"
}


LIMIT offset, records
eg: LIMIT 1, 3 => returns 2, 3 and 4th record

ROW_NUMBER over (order by something)


general repo and limit value as variable
call each repo from its respective service only
call service from its respective controller only 
i.e. controller and service should match, and, service and repo should match


In attempted quiz options can not not be selected also






-- Select quiz_id quizId, count(*) attendees from user_score group by quizId order by attendees desc limit 5;

-- admin leaderboard (old)
-- select c.name categoryName, q.title quizTitle, u.email_id userId, s.score
-- from user u, user_score s, category c, quiz q
-- where u.id = s.user_id AND q.id = s.quiz_id AND c.id = q.category_id
-- order by c.name, q.title, s.score desc
-- limit 5;


-- 6
Select count(distinct s.quiz_id) attemptedQuizCount
from user_score s
where s.user_id = 2;


-- 7
select c.name categoryName, count(*) quizzes
from category c, quiz q
where c.id = q.category_id And q.deleted = 'N'
group by c.name;

-- 7 (also with category not having any quiz)
select c.name categoryName, count(*) quizzes
from category c left join quiz q
on c.id = q.category_id And q.deleted = 'N'
group by c.name;

-- 8
select c.name, count(DISTINCT q.id) attemptedQuizzes
from category c, quiz q, user_score s
where c.id = q.category_id AND q.id = s.quiz_id AND s.user_id = 2
group by c.name;


-- admin leaderboard modified (repo TODO implemented), 		// service TODO: add pagination and also limit by category and limit by quiz per category and also limit by users per category per quiz
select c.name categoryName, q.title quizTitle, u.email_id userId, maxScore from user u 
inner join
(SELECT user_id, quiz_id, max(score) maxScore FROM user_score group by user_id, quiz_id) us
on us.user_id = u.id
inner join quiz q
on us.quiz_id = q.id
inner join category c
on q.category_id = c.id
order by c.name, q.title, maxScore desc
limit 5;



TODO: show first and last name instead of ids anywhere

TODO: remove string id everywhere and either take String uuid(may name it like quizCode) or Long id
TODO: set id wherever required for response

TODO: apply paging in leaderboard, in one using offset and in other using jpa Page


UPDATE
TODO: Admin LeaderBoard: first show top 10 quiz(most attempted) for each category, then top 10 score for a particular quiz
TODO: Attendee LeaderBoard: top 10 score for a particular quiz and user's score


TODO: for now we store the latest attempted quiz by a user in redis and generate pdf for that latest quiz only, later try to generate pdf for any quiz attempted by the user

TODO: remove string concat in query

TODO: write this.repo... everywhere

TODO: convert Map<String, Object> to DTOs

TODO: handle database constraint violation exceptions
TODO: check why the entity notations not working like unique =true, default ,etc.

TODO: do and check validation in all DTOs and entity

TODO: remove non-required annotations over every DTOs or entity, does annotations also inherit, if so then remove inherited annotations declaration from child class

TODO: place every literals in constant file, inlcuding endpoints, messages, etc. and make separate constant files for them

TODO: add doc comments everywhere


{
    "timestamp": "2023-01-15T13:40:06.831+00:00",
    "status": 404,
    "error": "Not Found",
    "message": "No message available",
    "path": "/api/v1/admin/leaderboard"
}

EXTRAS:


In Attendee:

show all quiz
show Attended quiz
show quiz by category
show attended quiz by category

In Admin:
Do top quiz per catgeory and top scorer per quiz leaderboard at last



TODO: add page number, useful to see document class
TODO: use some cache instead of hitting database for same thing again and again, if data is not going to change in database frequently











TODOS:
implements Serializable to each DTO

set postman using auto set tokens and uri variables

validate Path Variables also

TODO: make a common repository to write query

TODO: try and catch database exception instead of manually checking everywhere like constraint violation on delete, update ,etc.

TODO: seprate into thre DTO, Entity and Request (see the code where someone did it you saw it earlier), convert request to DTO in controller and mapToDTO<->mapToModel in service

TODO: rename question detail to question string

TODO: change category response with category DTO


TODO: on password change logout the user, means invalidate(set expiry time of past) or remove the accessToken and refresh token
TODO: do we need to store all scores or only max one or all unique scores
TODO: what if user submitted duplicate questions
TODO: add doc comment
TODO: optimize link question


{
    "responseTime": "01-23-2023 09:58:11",
    "httpStatus": "BAD_REQUEST",
    "message": "First name cannot be blank.",
    "exception": "MethodArgumentNotValidException",
    "fieldErrors": [
        {
            "field": "firstName",
            "errorCode": "Size"
        },
        {
            "field": "firstName",
            "errorCode": "NotBlank"
        }
    ]
}

{
    "firstName" : "",
    "lastName" : ""
}
retype password
add logout



firstName last name validation for corrector check





curl 'https://www.mooc.fi/en/' \
  -H 'authority: www.mooc.fi' \
  -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \
  -H 'accept-language: en-GB,en-US;q=0.9,en;q=0.8' \
  -H 'cache-control: no-cache' \
  -H 'pragma: no-cache' \
  -H 'referer: https://www.google.com/' \
  -H 'sec-ch-ua: "Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'sec-ch-ua-platform: "Linux"' \
  -H 'sec-fetch-dest: document' \
  -H 'sec-fetch-mode: navigate' \
  -H 'sec-fetch-site: same-origin' \
  -H 'sec-fetch-user: ?1' \
  -H 'upgrade-insecure-requests: 1' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36' \
  --compressed




  curl 'https://www.amazon.in/' \
  -H 'authority: www.amazon.in' \
  -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \
  -H 'accept-language: en-GB,en-US;q=0.9,en;q=0.8' \
  -H 'sec-ch-ua: "Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'sec-ch-ua-platform: "Linux"' \
  -H 'sec-fetch-dest: document' \
  -H 'sec-fetch-mode: navigate' \
  -H 'sec-fetch-site: none' \
  -H 'sec-fetch-user: ?1' \
  -H 'upgrade-insecure-requests: 1' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36' \
  --compressed




  curl 'https://www.amazon.in/?language=hi_IN' \
  -H 'authority: www.amazon.in' \
  -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \
  -H 'accept-language: en-GB,en-US;q=0.9,en;q=0.8' \
  -H 'cookie: session-id=258-2482637-9269541; i18n-prefs=INR; ubid-acbin=259-9518556-8664320; session-token="SdEgs/MhlOtpHUyV+3NDS2hIsizJitvWXgwJABIjq9ZIQB2wz0sjXXOyZwktegr8xmARceKattgUMY+JzJ22/eKsz8nJ6u6ed0tksskJdyDbFlH+pETSl9H2h9yPEQgldBPb4ww5nFbypT/NtsMX5dYG/MKUPc25MWqfX1T2wu9wxgR3fcGZpxYNsyB+3vX3kQbKr1t9JKGVL5Jd76U3dzzrhCMeg6Vo4zxKKfP1kAg="; session-id-time=2082787201l; csm-hit=tb:304909V9TQKJMX8WDYPB+s-304909V9TQKJMX8WDYPB|1674544773645&t:1674544773645&adb:adblk_yes; lc-acbin=hi_IN' \
  -H 'device-memory: 8' \
  -H 'downlink: 10' \
  -H 'dpr: 1' \
  -H 'ect: 4g' \
  -H 'referer: https://www.amazon.in/' \
  -H 'rtt: 50' \
  -H 'sec-ch-device-memory: 8' \
  -H 'sec-ch-dpr: 1' \
  -H 'sec-ch-ua: "Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'sec-ch-ua-platform: "Linux"' \
  -H 'sec-ch-ua-platform-version: "5.15.0"' \
  -H 'sec-ch-viewport-width: 1292' \
  -H 'sec-fetch-dest: document' \
  -H 'sec-fetch-mode: navigate' \
  -H 'sec-fetch-site: same-origin' \
  -H 'sec-fetch-user: ?1' \
  -H 'upgrade-insecure-requests: 1' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36' \
  -H 'viewport-width: 1292' \
  --compressed


  curl 'https://dr3fr5q4g2ul9.cloudfront.net/?a901e7d2-ff02-a5f6-9b2c-62b309dc0a74' \
  -H 'authority: dr3fr5q4g2ul9.cloudfront.net' \
  -H 'accept: */*' \
  -H 'accept-language: en-GB,en-US;q=0.9,en;q=0.8' \
  -H 'referer: https://www.amazon.in/' \
  -H 'sec-ch-ua: "Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'sec-ch-ua-platform: "Linux"' \
  -H 'sec-fetch-dest: empty' \
  -H 'sec-fetch-mode: no-cors' \
  -H 'sec-fetch-site: cross-site' \
  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36' \
  --compressed


  schema/structure not predefined
  useful in cases where some fields are not applicable or don't have data for that fields
  mongodb allows us to include only relevant information instead of a null return of a table query.
  

  